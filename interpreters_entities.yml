# This Yaml assembles a list of entities that are seen in the 'old interpreters'  (projects/discovery/src/interpreters_old/)
# entities for one interpreter can be used from another (egbs may use entities from credit)

## entities for class_credit.py
entities:
  - credit_product:
    - file: "credit_products.txt"

  - upcoming_year:
    - "%num{1,6}"
    - validation: "is_upcoming_year.py"  ( datetime.now.year() < x < datetime.now.year() + 10 , x is an int)
  
  - coupon:
    - "%num{1,6}? %spot? %num{1,6}?"
    - validation: "lambda x: 0 < x < 20"  ( x is a float, not a string )
  
  - credit_instrument:
    - "%credit_product %coupon? %upcoming_year?"
    


## entities for class_egbs.py
## Matthew: we do not want to use fuzzy matching anymore in discovery. the confusion matrix is used instead
## class_egbs.py contained 13 QuoteStructures (2 of those are hedges)

##products = ["schatz", "bkos", "dbrs", "bunds"]

- entities:
  - egbs_product:
    - file: "egbs_products.txt"
 
  - verse:  # should be moved to a place with defs, primitives
    - verse
    - versus

  - outright_egbs:
    - "%egbs_product %time_month %num{1,3}"
    - "%time_month %num{1,3} %egbs_product?"
    - spacing_threshold: 2

  - outright_egbs_2:  # this can also be covered by "%outright_combined" if egbs_product contains 'buxel'
    - "%num{1,3} (buxel | bunds)"

  - oble_keywords: # keywords intersect between oble and oble_oble_switch
    - oble
    - series
    
  - oble_keywords2:
    - "%oble_keywords"
    - to
    - against

  - oble:
    - "%oble_keywords2 %num{1,4} (%oble_keywords2 %time_month)?"   # can I use parentheses to group an object that's two entities?
    - "%num{1,4} %verse %oble_keywords? %num{1,4}"
    - "%num{1,4} %verse %time_month %num{1,4}"  
  
  - bund_switch_1:
    - "%time_month %num{1,3} %verse? %time_month %num{1,3}"

  - bund_switch_2:
    - "%num{1,5} %verse? bunds? %num{1,3}"
    - "%time_month %num{1,3}? %time_month %num{1,3}?"
    - spacing_threshold: 2

  - bund_switch_3:
    - "%num{1,3} %num{1,3} (spread | switch | bunds)"
    - "%time_month %num{1,3} %verse %num{1,3}"

  - cross:  # should be moved to a place with defs, primitives
    - cross
    - crossing
    - again
    - against

  - float_num:  # a primitive, # should be moved to a place with defs, primitives
    - "%num{1,5}? %spot %num{1,5}"

  - egbs_hedge:  # may be more a general pattern, not just an 'egbs_hedge'
    - "%float_num %cross"
    - "%cross %float_num"  # keeping this separate from above pattern. This is more precise for possible matches, and will be advantageous for testing later.
    - spacing_threshold: 2

  - egbs_quantity:  # may be more a general pattern, not just an 'egbs_quantity'
    - "%num{1,5} mill"
    - "(small | scrap)"  # keeping this separate from above pattern. This may be advantageous for testing later
    - spacing_threshold: 2

  

## entities for class_gilts.py
## list of used 'keywords'
## products = {
##   "fy": "fy",
##   "s/s": "s/s",
##   "mpc": "MPC",
##   "sonia": "sonia",
##   "fra": "fra",
##   "imm": "IMM",
##   "fra": "Fra",
##   "6s3s": "6x3",
## }
## 
## quantities = {'m': ' mill', 'y': ' yard'}
## 
## plural_numbers = [
##   'ones', 'twos', 'threes', 'fours', 'fives', 'sixes', 'sevens', 'eights', 'nines', 'tens', 'elevens', 'twelves',
##   'thirteens', 'fourteens', 'fifteens', 'sixteens', 'seventeens', 'eighteens', 'nineteens', 'twenties', 'thirties',
##   'forties', 'fourties', 'fifties', "sixties", "seventies", "eighties", "nineties", 'bonds', 'bond', 'twentys',
##   'thirtys', 'fortys', 'fiftys'
## ]
## 
## ordinals = [
##   "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth"
## ]
## ordinals += [i + "teenth" for i in ["thir", "four", "fif", "six", "seven", "eigh", "nine"]]
## ordinals += [
##   "twent" + i for i in
##   ["ieth", "y first", "y second", "y third", "y fourth", "y fifth", "y sixth", "y seventh", "y eighth", "y ninth"]
## ]
## ordinals += ["thirt" + i for i in ["ieth", "y first"]]
## ordinals = ordinals[::-1]

- entities:
  - gilts_product:
    - file: "gilts_products.txt"
  
  - year: # year word
    - year
    - years
  
  - plural_num:
    - file: "plural_numbers.txt"

  - ordinal:
    - file: "ordinals.txt"

  - future:
    - "$num{1,6} $year $gilts_product"
  
  - halves:
    - "$upcoming_year_word match"

  - mpc_gilts:
    - "$time_month $gilts_product"

  - semi_from_immmy:
    - "$num{1,6} $year $gilts_product $time_month $gilts_product"
    - spacing_threshold: 2

  - spreads_and_fly:
    - "$plural_num $plural_num ($ordinal $gilts_product $verse $plural_num $plural_num $gilts_product $gilts_product)?"
    - "$plural_num $plural_num $plural_num"

  #- basis:  # this is the same pattern as 'future', since fuzzy matching was removed.
  #  - "$num{1,6} $year $gilts_product"   # how does the get_product keyword arg work for QuoteStructure ?

  - gilts_quantity:
    - "$num{1,6} (mill | yard)"


## entities for class_swaps.py




## TODO: replace '$' with '@'


