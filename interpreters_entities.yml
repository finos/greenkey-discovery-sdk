# This Yaml assembles a list of entities that are seen in the 'old interpreters'  (projects/discovery/src/interpreters_old/)
# entities for one interpreter can be used from another (egbs may use entities from credit)

## entities for class_credit.py
entities:
  - credit_product:
    - file: "credit_products.txt"

  - upcoming_year:
    - "$num{1,6}"
    - validation: "is_upcoming_year.py"  ( datetime.now.year() < x < datetime.now.year() + 10 , x is an int)
  
  - coupon:
    - "$num{1,6}? $spot? $num{1,6}?"
    - validation: "lambda x: 0 < x < 20"  ( x is a float, not a string )
  
  - credit_instrument:
    - "$credit_product $coupon? $upcoming_year?"
    


## entities for class_egbs.py
## Matthew: we do not want to use fuzzy matching anymore in discovery. the confusion matrix is used instead
## class_egbs.py contained 13 QuoteStructures (2 of those are hedges)

##products = ["schatz", "bkos", "dbrs", "bunds"]

- entities:
  - egbs_product:
    - file: "egbs_products.txt"
 
  - verse:  # should be moved to a place with defs, primitives
    - verse
    - versus

  - outright_egbs:
    - "$egbs_product $time_month $num{1,3}"
    - "$time_month $num{1,3} $egbs_product?"
    - spacing_threshold: 2

  - outright_egbs_2:  # this can also be covered by "$outright_combined" if egbs_product contains 'buxel'
    - "$num{1,3} (buxel | bunds)"

  - oble_keywords: # keywords intersect between oble and oble_oble_switch
    - oble
    - series
    
  - oble_keywords2:
    - "$oble_keywords"
    - to
    - against

  - oble:
    - "$oble_keywords2 $num{1,4} ($oble_keywords2 $time_month)?"   # can I use parentheses to group an object that's two entities?
    - "$num{1,4} $verse $oble_keywords? $num{1,4}"
    - "$num{1,4} $verse $time_month $num{1,4}"  
  
  - bund_switch_1:
    - "$time_month $num{1,3} $verse? $time_month $num{1,3}"

  - bund_switch_2:
    - "$num{1,5} $verse? bunds? $num{1,3}"
    - "$time_month $num{1,3}? $time_month $num{1,3}?"
    - spacing_threshold: 2

  - bund_switch_3:
    - "$num{1,3} $num{1,3} (spread | switch | bunds)"
    - "$time_month $num{1,3} $verse $num{1,3}"

  - cross:  # should be moved to a place with defs, primitives
    - cross
    - crossing
    - again
    - against

  - float_num:  # a primitive, # should be moved to a place with defs, primitives
    - "$num{1,5}? $spot $num{1,5}"

  - egbs_hedge:  # may be more a general pattern, not just an 'egbs_hedge'
    - "$float_num $cross"
    - "$cross $float_num"  # keeping this separate from above pattern. This is more precise for possible matches, and will be advantageous for testing later.
    - spacing_threshold: 2

  - egbs_quantity:  # may be more a general pattern, not just an 'egbs_quantity'
    - "$num{1,5} mill"
    - "(small | scrap)"  # keeping this separate from above pattern. This may be advantageous for testing later
    - spacing_threshold: 2

  

## entities for class_gilts.py
## list of used 'keywords'
## products = {
##   "fy": "fy",
##   "s/s": "s/s",
##   "mpc": "MPC",
##   "sonia": "sonia",
##   "fra": "fra",
##   "imm": "IMM",
##   "fra": "Fra",
##   "6s3s": "6x3",
## }
## 
## quantities = {'m': ' mill', 'y': ' yard'}
## 
## plural_numbers = [
##   'ones', 'twos', 'threes', 'fours', 'fives', 'sixes', 'sevens', 'eights', 'nines', 'tens', 'elevens', 'twelves',
##   'thirteens', 'fourteens', 'fifteens', 'sixteens', 'seventeens', 'eighteens', 'nineteens', 'twenties', 'thirties',
##   'forties', 'fourties', 'fifties', "sixties", "seventies", "eighties", "nineties", 'bonds', 'bond', 'twentys',
##   'thirtys', 'fortys', 'fiftys'
## ]
## 
## ordinals = [
##   "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth"
## ]
## ordinals += [i + "teenth" for i in ["thir", "four", "fif", "six", "seven", "eigh", "nine"]]
## ordinals += [
##   "twent" + i for i in
##   ["ieth", "y first", "y second", "y third", "y fourth", "y fifth", "y sixth", "y seventh", "y eighth", "y ninth"]
## ]
## ordinals += ["thirt" + i for i in ["ieth", "y first"]]
## ordinals = ordinals[::-1]

- entities:
  - gilts_product:
    - file: "gilts_products.txt"
  
  - year: # year word
    - year
    - years
  
  - plural_num:
    - file: "plural_numbers.txt"

  - ordinal:
    - file: "ordinals.txt"

  - future:
    - "$num{1,6} $year $gilts_product"
  
  - halves:
    - "$upcoming_year_word match"

  - mpc_gilts:
    - "$time_month $gilts_product"

  - semi_from_immmy:
    - "$num{1,6} $year $gilts_product $time_month $gilts_product"
    - spacing_threshold: 2

  - spreads_and_fly:
    - "$plural_num $plural_num ($ordinal $gilts_product $verse $plural_num $plural_num $gilts_product $gilts_product)?"
    - "$plural_num $plural_num $plural_num"

  #- basis:  # this is the same pattern as 'future', since fuzzy matching was removed.
  #  - "$num{1,6} $year $gilts_product"   # how does the get_product keyword arg work for QuoteStructure ?

  - gilts_quantity:
    - "$num{1,6} (mill | yard)"


## entities for class_swaps.py
## products = {
##   "semi": "s/b 3s",
##   "money": "am 3s",
##   "fed": "ff",
##   "feds": "ff",
##   'e': 'E/E',
##   'lchcme': 'LCH/CME',
##   'ex:': 'EUREX',
##   'l.c.h.': 'LCH/EUREX',
##   'eurex': "EUREX"
## }
## futures = ['bund', 'bobl']
## quantities = {'m': ' million', 'y': ' billion', 'l': ' lots'}
## 
## swap currencies. currencies.keys() are used
## i.currencies = {
##   "dollar": "USD",
##   "greenback": "USD",
##   "euro": "EUR",
##   "euros": "EUR",
##   "yen": "JPY",
##   "sterling": "GBP",
##   "swissy": "CHF",
##   "swiss": "CHF",
##   "aussie": "AUD",
##   "kiwi": "NZD",
##   "cad": "CAD",
##   "loonie": "CAD",
##   "stocky": "SEK",
##   "stockee": "SEK",
##   "nokee": "NOK",
##   "check": "CZK",
##   "huf": "HUF",
##   "shekel": "ILS",
##   "rand": "ZAR",
##   "lira": "TRY",
##   "turkey": "TRY",
##   "poll": "PLN",
##   "rub": "RUB",
##   "ruble": "RUB",
##   "cable": "GBP",
##   "mexican": "MXN",
##   "tiie": "CLP",  # Chilean Peso - maybe TIIE
##   "peso": "CLP",  # Chilean Peso
##   "reel": "BRL",  # Brazilian Real - maybe DI
##   "real": "BRL",  # Brazilian Real
##   "di": "BRL",  # Brazilian Real
## }

entities:
  - swap_product:
    - file: "swap_products.txt" 
  
  - currency:  # this can be named 'swap_currency', if it is used only by the swap interpreter
    - file: "currencies.txt"

  - multiple_of_ten:
    - file: "two_digit_10s.txt"  # 10, 20, 30 ..., 90

  - outright_swap_month:
    - "$multiple_of_ten? $plural_num"
    - "$num{1,6} $year"
    - "$num{1,6} month"

  - gadget:
    - "($multiple_of_ten | $plural_num)? $plural_num gadget"
    - "($num{1,6} $year){1,2} gadget"

  - outright_plus_eonia:
    - "$num{1,6} $year eonia"

  - future_spread:  # the keywords below should be corrected. 'uxl' should be 'buxl' ? (buxl, bobl, schatz, bund)
    - "($year | uxl | bl | shatz | bunds | spread | eonia) (uxl | bl | shatz | bunds | spread | eonia)"  # an entity def is possible for these keywords

  - future_spread_box:  # the keywords below should be corrected. 'uxl' should be 'buxl' ? (buxl, bobl, schatz, bund)
    - "(uxl | bl | atz | und | spread | eonia | box) (uxl | bl | atz | und | spread | eonia | box) (uxl | bl | atz | und | spread | eonia | box)"

  - future_combined:  # the above two can be combined
    - "($year | uxl | bl | shatz | bunds | spread | eonia | box) (uxl | bl | shatz | bunds | spread | eonia | box) (uxl | bl | shatz | bunds | spread | eonia | box)?"

  - swap_basis_product:
    - file: "products_swap_basis.txt"  # ['c.m.e.','l.c.h.','ex:']+["3s1s", "6s3s", "6s1s", "6s12s"]

  - basis_swap:
    - "$swap_basis_product $num{1,6} $year ($num{1,6} $year)?"
    - "$swap_basis_product $multiple_of_ten ($plural_num | $num{1,6} $year)"
    - "$swap_basis_product ($plural_num | $num{1,6})? $plural_num"

  - basis_reverse_swap:
    - "(($num{1,6} $year) | $multiple_of_ten)? $num{1,6} $year $swap_basis_product"
    - "($multiple_of_ten | $plural_num | $num{1,6} ) $plural_num $swap_basis_product"

  - curve:
    - "($num{1,6} | $plural_num | $plural_num $multiple_of_ten | $multiple_of_ten $plural_num $multiple_of_ten?)? $plural_num $swap_product"

  - fly:
    - "($multiple_of_ten $plural_num $multiple_of_ten $plural_num | $plural_num $multiple_of_ten $plural_num | $multiple_of_ten $plural_num $plural_num | $plural_num $plural_num) $multiple_of_ten $plural_num"
    - "($multiple_of_ten $plural_num $multiple_of_ten | $multiple_of_ten $plural_num | $plural_num $multiple_of_ten | $num{1,6} $multiple_of_ten) $plural_num $plural_num"
    - "($num{1,6} $num{1,6} | not($num{1,6}) $plural_num $num{1,6} | $num{1,6} $plural_num | $plural_num $plural_num) $plural_num"
    - "$num{1,6} $year $num{1,6} $year $num{1,6} $year"

  - rate_swap:
    - "$num{1,6} $year $swap_product"

  - switch:
    - "$plural_num $verse? $plural_num"
    - "$multiple_of_ten $plural_num $verse? $multiple_of_ten $plural_num"
    - "$num{1,6} $year $verse? $num{1,6} $year"

  - swap_switch_product:
    - "3s1s"
    - "6s3s"
    - "fed"

  - switch_2:
    - "($swap_switch_product $num{1,6} $year | $num{1,6} $year $swap_switch_product ) $verse ($num{1,6} $year $swap_switch_product | $swap_switch_product $num{1,6} $year)"

  - spread:
    - "$multiple_of_ten? $plural_num"
    - "$num{1,6} $year (bunds | bobl)?"
  
  - time_word: # requires that time_week, time_year, time_day are defined in our set of 'base' entities
    - "($time_week | $time_month | $time_year | $time_day)"

  - ois:
    - "$num{1,6} $time_word oes"

  - swap_quantity:
    - "$num{1,6} (mill | yard | lot)"
    - "(small | scrap | tiny)"
    - spacing_threshold: 2
  
  - swap_forward:
    - "($num{1,6} $time_word | $plural_num | $num{1,6}) forward"

  - swap_hedge:
    - "$float_num (bund | bobl)? $cross"
    - "$cross (bund | bobl)? $float_num"
    - spacing_threshold: 2



## entities for class_swaptions.py
## products = {"euro": "EUR", "euros": "EUR", "sterling": "GBP"}
## quantities = {'m': ' million', 'y': ' billion'}

entities:
  - percent_num:
    - "($num{1,6} | $float_num) percent"

  - swaption_product:
    - euro
    - euros
    - sterling

  - outright_atm:
    - "$swaption_product $num{1,6} $time_word $num{1,6} $time_word"
  
  - dated_skew:  # to correct: list of 'receiv:, payer:' .
    - "($swaption_product | receive | payer) $num{1,6} $time_month $num{1,3} $num{1,6} $time_word ($float_num | ($num{1,12})) (receive | payer)"
  
  - skew: 
    - "($swaption_product | receive | payer) $num{1,6} $time_word $num{1,6} $time_word ($num{1,12}) (receive | payer)"

  - skew_collar_strangle:
    - "($swaption_product | wide | collar | strangle) $num{1,6} $time_word $num{1,6} $time_word $num{1,6} ($swaption_product | wide | collar | strangle) ($swaption_product | wide | collar | strangle)"

  - skew_spread:  # to correct: 'ats', 'receive', 'pay' keywords
    - "($swaption_product | ats | receive | pay) $num{1,6} $time_word $num{1,6} $time_word (ats | receive | pay) $verse $num{1,6} (ats | receive | pay)"

  - skew_spread_3:
    - "$swaption_product $num{1,6} $time_word $num{1,6} $time_word $verse $num{1,6} $time_word $num{1,6} $time_word"
  
  - skew_spread_2:
    - "($swaption_product | receive | ratio | payer | to) $num{1,6} $time_word $num{1,6} $time_word $num{1,12} (receive | ratio | payer) $verse $num{1,12} (receive | ratio | payer) ($num{1,6} ($swaption_product | receive | ratio | payer | to)? $num{1,6} (receive | ratio | payer))?"

  - swaption_hedge:
    - "$verse ($num{1,12} | $float_num)"

  - swaption_quantity:
    - "(mill | yard | in | delta) ($percent_num | $float_num ($percent_num | $num{1,6}) )"
    - "(mill | yard | in | delta) $num{1,10} (mill | yard | in | delta)?"
    - "$num{1,6} (mill | yard | in | delta)"
    - spacing_threshold: 2


    
## entities for class_fxforwards.py

## products = {
##   "dollar": "USD",
##   "greenback": "USD",
##   "euro": "EUR",
##   "euros": "EUR",
##   "yen": "JPY",
##   "sterling": "GBP",
##   "swissy": "CHF",
##   "aussie": "AUD",
##   "kiwi": "NZD",
##   "cad": "CAD",
##   "loonie": "CAD",
##   "stocky": "SEK",
##   "stockee": "SEK",
##   "nokee": "NOK",
##   "check": "CZK",
##   "huf": "HUF",
##   "shekel": "ILS",
##   "rand": "ZAR",
##   "lira": "TRY",
##   "turkey": "TRY",
##   "poll": "PLN",
##   "rub": "RUB",
##   "ruble": "RUB",
##   "cable": "GBP"
## }
## 
## quantities = {'m': ' million', 'y': ' billion'}


entities:
  - fxforwards_product:
    - file: "fxforwards_products.txt"

  - fxforward:
    - "$num{1,6} ($year | month | week) $fxforwards_product $fxforwards_product?"
    - "$plural_num? $plural_num $fxforwards_product $fxforwards_product"
    - "overnight (overnight | $fxforwards_product) (overnight | $fxforwards_product)?"
    - "((tom | spot) | next) ((tom | spot) | next) ((tom | spot) | next | $fxforwards_product) ((tom | spot) | next | $fxforwards_product)?"
    - "spot week (spot | $fxforwards_product) (spot | $fxforwards_product)?"

  - fxforward_quantity:
    - "(mill | yard | in) $num{1,6} ((mill | yard | in) | $num{1,6})?"
    - "((mill | yard | in) | $num{1,6}) (mill | yard | in)"





## entities for class_fxoptions.py

## products = {
##   "dollar": "USD",
##   "greenback": "USD",
##   "euro": "EUR",
##   "euros": "EUR",
##   "yen": "JPY",
##   "sterling": "GBP",
##   "swissy": "CHF",
##   "swiss": "CHF",         # not part of products for class_fxforwards.py
##   "aussie": "AUD",
##   "kiwi": "NZD",
##   "cad": "CAD",
##   "loonie": "CAD",
##   "stocky": "SEK",
##   "stockee": "SEK",
##   "nokee": "NOK",
##   "check": "CZK",
##   "huf": "HUF",
##   "shekel": "ILS",
##   "rand": "ZAR",
##   "lira": "TRY",
##   "turkey": "TRY",
##   "poll": "PLN",
##   "rub": "RUB",
##   "ruble": "RUB",
##   "cable": "GBP"
## }


entities:
  - fxoptions_product:
    - file: "fxoptions_products.txt"

  - num_all:
    - "$num{1,6} | $plural_num | $ float_num"
    
  - struct_1:
    - "($fxoptions_product | ats) $num{1,6} $time_word $num{1,4} $plural_num?"
    - "($fxoptions_product | ats) $num{1,6} $time_word $num{1,6}? $num{1,3} $plural_num?"
    - "($fxoptions_product | ats) $num{1,6} $time_word ( $num{1,6} $plural_num | ats )"  # To fix:  'ats'. should this be 'shatz' ?
    - "$num{1,6} $time_word ($fxoptions_product | ats) $num{1,4} $plural_num?"
    - "$num{1,6} $time_word ($fxoptions_product | ats) ($num{1,6} $plural_num | ats)"
    - "ats $num{1,6} $time_word ($fxoptions_product | ats)"

  - struct_2:
    - "($fxoptions_product | ats) $plural_num $num{1,4} $plural_num?"
    - "($fxoptions_product | ats) ($plural_num ats | ats $plural_num)"
    - "($fxoptions_product | ats) $time_day ($num{1,4} | ats)"
    - "$plural_num (($fxoptions_product | ats) ats | ats ($fxoptions_product | ats))"
    - "$plural_num ($fxoptions_product | ats) $num{1,4} $plural_num?"
    - "$time_day ($fxoptions_product | ats) (($num{1,4} $plural_num?) | ats)"

  - struct_3:
    - "($fxoptions_product | ats) ($fxoptions_product | ats) $num{1,6} $time_word $num{1,4} $plural_num?"
    - "($fxoptions_product | ats) ($fxoptions_product | ats) ($num{1,6} $time_word ats | ats $num{1,6} $time_word)"
    - "$num{1,6} $time_word ($fxoptions_product | ats) ($fxoptions_product | ats) $num{1,4} $plural_num?"
    - "$num{1,6} $time_word ((($fxoptions_product | ats) ($fxoptions_product | ats) ats) | (ats ($fxoptions_product | ats) ($fxoptions_product | ats)))"

  - struct_4:
    - "($fxoptions_product | ats) ($fxoptions_product | ats) $plural_num $num{1,4}"
    - "($fxoptions_product | ats) ($fxoptions_product | ats) (ats $plural_num | $plural_num ats)"
    - "($fxoptions_product | ats) ($fxoptions_product | ats) (ats $time_day | $time_day ats)"   # do i need extra parentheses around ($time_day ats) ?
    - "$plural_num ($fxoptions_product | ats) ($fxoptions_product | ats) $num{1,4}"
    - "($time_day | $plural_num) ((($fxoptions_product | ats) ($fxoptions_product | ats) ats) | (ats ($fxoptions_product | ats) ($fxoptions_product | ats)))"
  
  - struct_5:
    - "($plural_num ($fxoptions_product | delta | fly | riskies) | ($fxoptions_product | delta | fly | riskies) $plural_num) $num{1,6} (delta | fly | riskies) (delta | fly | riskies)"

  - struct_6_7_8_9_10_11_12:
    - "($num{1,6} $time_word ($fxoptions_product | delta | fly | riskies) ($fxoptions_product | delta | fly | riskies)? | ($fxoptions_product | delta | fly | riskies)? ($fxoptions_product | delta | fly | riskies) $num{1,6} $time_word) $num{1,6} (delta | fly | riskies) (delta | fly | riskies)"
    - "(($fxoptions_product | delta | fly | riskies) ($fxoptions_product | delta | fly | riskies) $plural_num | $plural_num ($fxoptions_product | delta | fly | riskies) ($fxoptions_product | delta | fly | riskies)) $num{1,6} (delta | fly | riskies) (delta | fly | riskies)"

  - struct_13_14:
    - "$fxoptions_product $fxoptions_product? $num{1,6} ($time_month | $time_word) $num{0,9} $num_all $cross $num{1,6} $time_month $num{0,9} $num_all"
  
  - vega_1_2_3_4_5:
    - "$num{1,6} $time_word $cross? $num{1,6} $time_word ($fxoptions_product | ats | vega) ($fxoptions_product | ats | vega)? (ats | vega) (ats | vega)"
    - "($fxoptions_product | ats | vega) ($fxoptions_product | ats | vega)? $num{1,6} $time_word $cross? $num{1,6} $time_word (ats | vega) (ats | vega)"
    - "$num{1,6} $time_word ($fxoptions_product | ats | vega) ($fxoptions_product | ats | vega) $float_num $cross $num{1,6} $time_word $float_num (ats | vega)"

  - overnight:
    - "($fxoptions_product | overnight) ($fxoptions_product | overnight)? overnight $num{1,6}? $float_num"
    - "($fxoptions_product | overnight) ($fxoptions_product | overnight)? overnight ($num{1,10})?"
    - "overnight ($fxoptions_product | overnight) ($fxoptions_product | overnight)? $num{1,6}? $float_num"
    - "overnight ($fxoptions_product | overnight) ($fxoptions_product | overnight)? ($num{1,10})?"

  - fxoption_quantity:
    - "(mill | yard | in | even) $num{1,6}? (mill | yard | even)"
    - "(mill | yard | in | even) $num{1,10}"
    - "(mill | yard | in | even) (mill | yard | in | even)"
    - "$num{1,6} (mill | yard | even)"




## entities for class_energy.py

## futures = {'wti': 'CL', 'brent': 'BZ', 'gas': 'NG'}
## options = {'wti': 'LO', 'brent': 'BZO', 'gas': 'LN'}

entities:
  - future:
    - file: "futures.txt"
  - option:
    - file: "options.txt"

  - call_put_fly_spread:
    - "($option | call | put | fly | spread) $time_month $num{1,20} ($option | call | put | fly | spread) ($option | call | put | fly | spread)"

  - strangle_fence_straddle_call_put:
    - "($option | strangle | straddle | fence | collar | call | put) $time_month $num{1,14} ($option | strangle | straddle | fence | collar | call | put)"

  - strip_spread:
    - "($future | strip | spread) $time_month $num{1,2} $time_month $num{1,2} ($future | strip | spread)"

  - outright_energy:
    - "$futures $time_month $num{1,2}"

  - energy_hedge:
    - "$cross $float_num (delta $num{1,6} | $num{1,6} delta)"

  - energy_quantity:
    - "quant $num{1,6}"




## entities for class_distillates.py

## products = {
##   'rbob': "RBOB",
##   'RBOB': "RBOB",
##   'ebob': "EBOB",
##   'EBOB': "EBOB",
##   'nwe': 'NWE',
##   'NWE': 'NWE',
##   'mopj': 'MOPJ',
##   'MOPJ': 'MOPJ',
##   'MED': 'MED',
##   'med': 'MED',
##   'ron92': 'RON92',
##   'RON92': 'RON92',
##   'crack': 'CRACK',  # they sometimes fail to say what product they are trading and just say crack to trade the spread
##   'CRACK': 'CRACK',
##   'roll': 'ROLL',
##   'ROLL': 'ROLL',
##   "wti": "WTI",
##   "WTI": "WTI",
##   "brent": "BRENT",
##   "BRENT": "BRENT",
##   "east": "MOPJ",
##   "naptha": "NAPHTHA",
##   "naphtha": "NAPHTHA",
##   "north west": "NWE",
##   "northwest": "NWE",
##   "mopj": "MOPJ",
##   "gas nap": "EBOB  NWE",
##   "gasnap": "EBOB  NWE",
##   'r bob': "RBOB",
##   'e bob': "EBOB",
##   "ebob crack": "EBOB BRENT",
##   "arb": "RBOB EBOB",
##   "mo gas crack": "RON92 BRENT",
##   "europe crack": "NWE BRENT",
##   "japanese crack": "MOPJ BRENT",
##   "mednorth": "MED EBOB",
##   "eastwest": "MOPJ EBOB",
##   "east west": "MOPJ EBOB",
##   "92 crack": "RON92 BRENT",
##   "nap crack": "NWE BRENT",
##   "MOPJ crack": "MOPJ BRENT",
##   "NAPHTHA MOPJ": "MOPJ",
##   "sing gas": "RON92",
##   "european NAPTHA": "NAPTHA",
##   "west": "EBOB",
##   "north": "EBOB",
##   "ron": "RON92",
##   "mo gas 92": "RON92",
##   "med": "MED",
##   "mediterranean": "MED",
##   "texas crude oil": "WTI",
##   "crude oil": "BRENT",
##   "crude": "BRENT",
##   "light": "WTI",
##   "sweet": "WTI",
## }


entities:
  - distillates_product:
    - file: "distillates_products.txt"

  - sixteen_to_nineteen:
    - sixteen
    - seventeen
    - eighteen
    - nineteen
  
  - distillates_product2:
    - "($distillates_product | q one | q two | q three | q four | cal | $sixteen_to_nineteen | bal | fp)"
  
  - distillates_noprod:
    - "(fp | bal) $time_month $time_month (($sixteen_to_nineteen | fp | bal) | (fp | bal))"  # to fix:  'fp' and 'bal' words expanded
    - "((fp | bal) | $time_month) $time_month ((fp | bal)| ($sixteen_to_nineteen | fp | bal))"
    - "(fp | bal) $time_month $time_month?"
    - "$time_month (fp | bal)"
    - "$time_month $time_month?"
    - "$time_month ($sixteen_to_nineteen | fp | bal)"
  
  - distillates_hasprod:
    - "(bal | fp) $distillates_product2 $distillates_product2 $time_month $time_month $distillates_product2?"
    - "(bal | fp) $distillates_product2 $distillates_product2 $time_month $distillates_product2?"
    - "(bal | fp) $time_month $time_month $distillates_product2 $distillates_product2?"
    - "(bal | fp) $time_month $time_month (bal | fp)"
    - "(bal | fp) $time_month $distillates_product2 $distillates_product2?"
    - "(bal | fp) $distillates_product2 $time_month $time_month $distillates_product2?"
    - "(bal | fp) $distillates_product2 $time_month $distillates_product2?"
    - "(bal | fp) $distillates_product2 $distillates_product2 (bal | fp)?"
    - "$time_month $time_month $distillates_product2 $distillates_product2?"
    - "$time_month $time_month (bal | fp)"
    - "$time_month $distillates_product2 $distillates_product2?"
    - "$distillates_product2 $distillates_product2 $time_month $time_month $distillates_product2?"
    - "$distillates_product2 $distillates_product2 $time_month $distillates_product2?"
    - "$distillates_product2 $time_month $time_month $distillates_product2?"
    - "$distillates_product2 $time_month $distillates_product2?"
    - "$distillates_product2 $distillates_product2 $distillates_product2 $distillates_product2?"
    - "$distillates_product2 $distillates_product2 (bal | fp)?"
    - "$distillates_product2 (bal | fp)"

  - fly_noprod:
    - "$time_month $time_month $time_month fly"

  - fly_hasprod:
    - "$time_month $time_month $time_month $distillates_product fly"
  
  - box_hasprod:
    - "$time_month $time_month $distillates_product $distillates_product box"

  - distillates_quantity:
    - "(mill | yard | in | kt) $num{1,6} ((mill | yard | in | kt) | $num{1,6})?"
    - "($num{1,6} | (mill | yard | in | kt)) (mill | yard | in | kt)"




## entities for class_softs.py

## products = {
##   'df': "DF",  # robusta coffee
##   'kc': "KC",  # ny coffee
##   'sb': "SB",  # ny sugar
##   'cc': "CC",  # ny cocoa
##   'w': "W",  # white sugar
##   'ql': "QL",  # london cocoa
##   'ozn': "OZN",  # cme corn
##   'sm': "SM",  # cme soy bean meal
##   'so': "SO",  # cme soy bean oil
##   'sz': "SZ",  # cme soy beans
##   'obm': "OBM",  # matif wheat
## }


entities:
  - softs_product:
    - file: "softs_products.txt"

  - call_or_put:
    - "$softs_product $time_month $upcoming_year_word $num{1,12} (put | call)"
  
  - call_or_put_vs:
    - "$softs_product $time_month $upcoming_year_word $num{1,12} (put | call) $verse $num{1,12} delta $num{1,6}"

  - call_or_put_spread:
    - "($softs_product | spread) $time_month $upcoming_year_word $num{4,21} (time | x) $num{1,6} (put | call) spread"
    - "($softs_product | spread) $time_month $upcoming_year_word $num{2,18} (put | call) spread $verse $num{1,12} delta $num{1,6}"
    - "($softs_product | spread) $month $upcoming_year_word $num{2,21} (put | call) spread"

  - call_or_put_cal:
    - "($softs_product | calendar) $time_month $upcoming_year_word $time_month $upcoming_year_word $num{1,12} (put | call) calendar"  # to fix:  should 'calend' be 'calendar' ?

  - straddle:
    - "($softs_product | straddle) $time_month $upcoming_year_word $num{1,12} straddle"
  
  - strangle:
    - "($softs_product | strangle) $time_month $upcoming_year_word $num{2,18} strangle"

  - fence:
    - "($softs_product | fence | ttc) $time_month $upcoming_year_word $num{2,18} (fence | ttc) (fence | ttc) $verse $num{1,12} delta $num{1,6}"

  - condor:
    - "($softs_product | condor) $time_month $upcoming_year_word $num{3,24} (put | call)? condor"

  - softs_quantity:  # NOTE this has the same patterns as $fxforward_quantity
    - "(mill | yard | in) $num{1,6} ((mill | yard | in) | $num{1,6})?"
    - "((mill | yard | in) | $num{1,6}) (mill | yard | in)"

    


## TODO: replace '$' with '@'

