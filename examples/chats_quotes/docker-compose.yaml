---
version: "3.7"
services:
  middleware-pipeline:
    image:
      "docker.greenkeytech.com/middleware:${MIDDLEWARE_TAG:-latest}"
    environment:
      - GKT_USERNAME=gkt
      - GKT_SECRETKEY=5f3d00b5b15884c280a390725a863941a68bfe55
      - GKT_API=https://scribeapi.greenkeytech.com/
      - FILE_MAKER_URL=http://file_maker/process
      - FORMATTER_URL=http://formatter/process
      - MIDDLEWARE=FORMATTER,DISCOVERY,FILE_MAKER #
      - PORT=:6000
      - DISCOVERY_URL=http://discovery/process
    networks:
      - greenkey
    ports:
      - "6000:6000"
    volumes:
      - recordings:/files
    deploy:
      restart_policy:
        condition: any
        delay: 0s
        window: 120s
  # ----------------------------------------------------------------------
  ## FIRST STEP ###
  chat_slack:
    image:
      "docker.greenkeytech.com/chat_slack:${CHAT_SLACK_DOCKER_TAG:-latest}"
    ports:
      - "8888:80" # set ports
      ## make a request (curl, python repl) to chat_slack from your workstation /status
      ## then retrieve some chats, and make sure it can return json resonse with chats
    environment:
      - GKT_USERNAME=gkt
      - GKT_SECRETKEY=5f3d00b5b15884c280a390725a863941a68bfe55
      - GKT_API=https://scribeapi.greenkeytech.com/
      - PORT=80
      - SLACK_API_URL=https://slack.com/api     # SLACK_URL
      - SLACK_ACCESS_TOKEN=xoxp-4953937137-344679330118-509400138422-a20f349799113ba21f5c91e8a190cd14
      # need DESTINATION_URL -> sending chats to middleware pipeline (different from current one as does not traverse all microservices
      - DESTINATION_URL=http://middleware-pipeline:6000/mw
    networks:
      - greenkey
  # ----------------------------------------------------------------------
  formatter:
    image:
      "docker.greenkeytech.com/formatter:${FORMATTER_DOCKER_TAG:-latest}"
    environment:
      - GKT_USERNAME=gkt
      - GKT_SECRETKEY=5f3d00b5b15884c280a390725a863941a68bfe55
      - GKT_API=https://scribeapi.greenkeytech.com/
      - PORT=80
    networks:
      - greenkey
  # ----------------------------------------------------------------------
  discovery:
    image:
      "docker.greenkeytech.com/discovery:${DISCOVERY_DOCKER_TAG:-latest}"
    environment:
      - GKT_USERNAME=gkt
      - GKT_SECRETKEY=5f3d00b5b15884c280a390725a863941a68bfe55
      - GKT_API=https://scribeapi.greenkeytech.com/
      - PORT=80
      - DISCOVERY_DOMAINS=broker_quotes     #TODO change from `broker_quotes`
    networks:
      - greenkey
  # ----------------------------------------------------------------------
  file_maker:
    image:
      "docker.greenkeytech.com/file_maker:${FILE_MAKER_DOCKER_TAG:-latest}"
    environment:
      - GKT_USERNAME=gkt
      - GKT_SECRETKEY=5f3d00b5b15884c280a390725a863941a68bfe55
      - GKT_API=https://scribeapi.greenkeytech.com/
      - PORT=80
    networks:
      - greenkey
    volumes:
      - recordings:/files
# ----------------------------------------------------------------------
networks:
  greenkey:
    driver: overlay
  hostnet:
    external: true
    name: host

volumes:
  call_id_config:
  recordings:
  # Uncomment below for transient storage of recordings.
  # Be warned! Removing the stack will delete all recordings & transcripts!
  # This is a desired feature for some clients.
  #   driver: local
  #   driver_opts:
  #     type: tmpfs
  #     device: tmpfs
  ###########################################
  data-built: