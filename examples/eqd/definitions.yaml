---
entities:
  one_through_seven:
    - a
    - an
    - one
    - two
    - three
    - four
    - five
    - six
    - seven
  denominator:
    - quarter
    - quarters
    - fourth
    - fourths
    - half
    - eighth
    - eighths
    - eights
  # used for par_num (e.g. 'par seven')
  one_through_nine:
    - "@one_through_seven"
    - eight
    - nine
    # needed for 'Nine' output
    - formatting: "entity.lower()"
  doubles:
    - doubles -> 55
  par:
    - par -> one hundred
  par_num:
    - "@par @one_through_nine?"
    - formatting: format_par.py
  numthree:
    - "(@num{1,3}|@doubles)"
    - spacer: ''
    - validation: "len(entity) > 1"
  numfive:
    - "@num{1,5}"
    - spacer: ''
  and:
    - "and"
  spot:
    - "spot"
    - "point"
  frac_num:
    - "(@numfive|@par_num) (@and @one_through_seven? @denominator)?"
    - formatting: format_fraction.py
  float_num:
    - "(@numfive|@par_num) (@spot (@numfive|@doubles))?"
    - spacer: ''
    - formatting: "entity.replace('spot', '.').replace('point', '.').replace(' ', '')"
  # product class specific
  possible_date:
    - "@num{1,2}"
    - spacer: ''
    - validation: "int(entity) > 0 and int(entity) <= 31"
  ord_month:
    - "(((@num_ord|possible_date) @time_month) | (@time_month (@num_ord|possible_date)?))"
    - formatting: format_date.py
  # eqd_product:
  #  - file: "custom/eqd_products.txt"
  maturity:
    - "@ord_month? @upcoming_year"
    - spacer: '/'
  upcoming_year:
    - "(@num|@num_plural){1,2}"
    - spacer: ''
    # Uncomment if you want long form years
    # - validation: "int(entity) > 2017 and int(entity) <= 2050"
    # - formatting: '"20"+str(entity)'
    - validation: "int(entity) > 17 and int(entity) <= 50"
  coupon:
    - "(@float_num|@frac_num)"
    - validation: "float(entity) > 0 and float(entity) < 20"
  instrument:
    - file: "eqd_products.txt"
    - formatting: "str(entity).upper()"
    # - "@eqd_product"
    # - spacing_threshold: 1
  wholepart:
    - "(@numfive|@par_num)"
    - spacer: ''
    - validation: "int(entity)"
  price1_vague:
    - "@wholepart @numthree"
    - spacer: '.'
  price2_vague:
    - "@wholepart @numthree"
    - spacer: '.'
  price1:
    - "(@float_num|@frac_num)"
    - spacer: ''
    - validation: "float(entity) > 0 and float(entity) < 300"
  price2:
    # entity_requirements is needed. req: instrument, price1
    - "(@float_num|@frac_num)"
    - validation: "float(entity) > 0 and float(entity) < 300"
  quantity_preposition:
    - in
    - for
    - "on"
    - formatting: "''"
  quantity_amount:
    - k
    - million
    - mill
    - yard
    - billion
    - yards
    - mills
    - millions
    - thousand
    - formatting: format_quantity_amount.py
  quantity:
    - "@quantity_preposition @float_num @quantity_amount?"  # in 500k
    - "@float_num @quantity_amount"  # 500k
    - spacer: ""
  by:
    - by
  up:
    - up
  # insert bid/ask keywords below
  # loosely, the bid quantity
  quantity1:
    - "@quantity"  # 50k
    - "@quantity @up?"  # 500k up
    - formatting: format_bid_quantity.py
  # loosely, the ask quantity
  quantity2:
    - "@by @quantity"  # 50k by 50k
    - formatting: format_ask_quantity.py
intents:
  eqd:
    domain: "quotes_2.0"
    skip_training: true
    examples:
      - "i have a @instrument for @price1 @price2? quantity1?"
      - "i have a @instrument for @price1_vague @price2?"
      - "i have a @instrument for @price1 @price2_vague?"
      - "i have a @instrument for @price1_vague @price2_vague?"
      - "i have a @instrument for @price1 @numthree?"
      - "i have a @instrument for @price1_vague @numthree?"
    entity_patterns:
      - "instrument (price1|price1_vague) (price2|price2_vague|numthree)? quantity1? quantity2?"
    structure_enforcement: true
    schema:
      return_json:
        interpreted_quote:
          imString: "@instrument @price1 / @price2"
          product: "@instrument"
          product_details:
            price_list:
            - value: "@price1"
              category: "bid"
              type: " "
            - value: "@price2"
              category: "ask"
              type: " "
        category: "quote"
